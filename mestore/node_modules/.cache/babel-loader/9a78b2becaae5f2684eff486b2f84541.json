{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Leo\\\\Desktop\\\\project\\\\work\\\\mestore\\\\src\\\\components\\\\Dashboard\\\\Earnings\\\\ChartContainer\\\\ChartContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef } from \"react\";\nimport { addData } from \"../../../../utils/ChartUtils\";\nimport { Chart, registerables } from \"chart.js\";\nimport UiContext from \"../../../../store/ui-context\";\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst labels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nconst data = {\n  labels: labels,\n  datasets: [{\n    label: \"Sales\",\n    backgroundColor: \"rgba(51, 200, 99, .1)\",\n    fill: true,\n    borderColor: \"#33c863\",\n    data: addData(12),\n    tension: 0.2\n  }, {\n    label: \"Profit\",\n    backgroundColor: \"rgba(242, 153, 74, .1)\",\n    fill: true,\n    borderColor: \"#f2994a\",\n    data: addData(12),\n    tension: 0.2\n  }]\n};\n\nconst ChartContainer = () => {\n  _s();\n\n  const uiCtx = useContext(UiContext);\n  const chartRef = useRef();\n  const [infoList, setInfoList] = useState([]);\n  useEffect(() => {\n    Axios.get(\"http://localhost:3001/api/get\").then(response => {\n      console.log(response.data);\n    });\n  }, []);\n  useEffect(() => {\n    const canvasId = document.getElementById(\"myCanvas\");\n    chartRef.current = new Chart(canvasId, {\n      type: \"line\",\n      data,\n      options: {\n        maintainAspectRatio: false,\n        interaction: {\n          mode: \"index\",\n          intersect: false,\n          axis: \"x\"\n        },\n        plugins: {\n          tooltip: {\n            enabled: true\n          },\n          legend: false\n        },\n        scales: {\n          y: {\n            display: false\n          },\n          x: {\n            grid: {\n              drawBorder: false,\n              borderDash: [6],\n              color: uiCtx.theme === \"light\" ? \"#dddfe5\" : \"#26323f\",\n              border: false\n            },\n            ticks: {\n              color: uiCtx.theme === \"light\" ? \"#929292\" : \"#fff\",\n              font: {\n                family: \"'Mulish', sans-serif\",\n                size: \"16px\"\n              }\n            }\n          }\n        }\n      }\n    });\n    return () => chartRef.current.destroy();\n  }, [uiCtx.theme]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"myCanvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ChartContainer, \"jzFot9VA0KKVl4lnxx6ykfjX2no=\");\n\n_c = ChartContainer;\nexport default ChartContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartContainer\");","map":{"version":3,"sources":["C:/Users/Leo/Desktop/project/work/mestore/src/components/Dashboard/Earnings/ChartContainer/ChartContainer.js"],"names":["React","useContext","useEffect","useRef","addData","Chart","registerables","UiContext","Axios","register","labels","data","datasets","label","backgroundColor","fill","borderColor","tension","ChartContainer","uiCtx","chartRef","infoList","setInfoList","useState","get","then","response","console","log","canvasId","document","getElementById","current","type","options","maintainAspectRatio","interaction","mode","intersect","axis","plugins","tooltip","enabled","legend","scales","y","display","x","grid","drawBorder","borderDash","color","theme","border","ticks","font","family","size","destroy"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef } from \"react\";\r\n\r\nimport { addData } from \"../../../../utils/ChartUtils\";\r\n\r\nimport { Chart, registerables } from \"chart.js\";\r\nimport UiContext from \"../../../../store/ui-context\";\r\nimport Axios from \"axios\";\r\n\r\nChart.register(...registerables);\r\n\r\nconst labels = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\nconst data = {\r\n    labels: labels,\r\n    datasets: [\r\n        {\r\n            label: \"Sales\",\r\n            backgroundColor: \"rgba(51, 200, 99, .1)\",\r\n            fill: true,\r\n            borderColor: \"#33c863\",\r\n            data: addData(12),\r\n            tension: 0.2,\r\n        },\r\n        {\r\n            label: \"Profit\",\r\n            backgroundColor: \"rgba(242, 153, 74, .1)\",\r\n            fill: true,\r\n            borderColor: \"#f2994a\",\r\n            data: addData(12),\r\n            tension: 0.2,\r\n        },\r\n    ],\r\n};\r\nconst ChartContainer = () => {\r\n    const uiCtx = useContext(UiContext);\r\n    const chartRef = useRef();\r\n\r\n    \r\nconst [infoList, setInfoList] = useState([]);\r\n\r\nuseEffect(() => {\r\n    Axios.get(\"http://localhost:3001/api/get\").then((response) => {\r\n        console.log(response.data);\r\n    });\r\n}, []);\r\n\r\n    useEffect(() => {\r\n        const canvasId = document.getElementById(\"myCanvas\");\r\n        chartRef.current = new Chart(canvasId, {\r\n            type: \"line\",\r\n            data,\r\n            options: {\r\n                maintainAspectRatio: false,\r\n                interaction: {\r\n                    mode: \"index\",\r\n                    intersect: false,\r\n                    axis: \"x\",\r\n                },\r\n                plugins: {\r\n                    tooltip: {\r\n                        enabled: true,\r\n                    },\r\n                    legend: false,\r\n                },\r\n                scales: {\r\n                    y: {\r\n                        display: false,\r\n                    },\r\n                    x: {\r\n                        grid: {\r\n                            drawBorder: false,\r\n                            borderDash: [6],\r\n                            color: uiCtx.theme === \"light\" ? \"#dddfe5\" : \"#26323f\",\r\n                            border: false,\r\n                        },\r\n                        ticks: {\r\n                            color: uiCtx.theme === \"light\" ? \"#929292\" : \"#fff\",\r\n                            font: {\r\n                                family: \"'Mulish', sans-serif\",\r\n                                size: \"16px\",\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n        return () => chartRef.current.destroy();\r\n    }, [uiCtx.theme]);\r\n\r\n    return <canvas id=\"myCanvas\"></canvas>;\r\n};\r\n\r\nexport default ChartContainer;\r\n"]},"metadata":{},"sourceType":"module"}